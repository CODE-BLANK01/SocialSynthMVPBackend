generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())

  posts            Post[]            @relation("UserPosts")
  schedules        Schedule[]        @relation("UserSchedules")
  sessions         Session[]
  platformAccounts PlatformAccount[]
  llmLogs          LLMLog[]
}

model Post {
  id     String @id @default(uuid())
  userId String
  user   User   @relation("UserPosts", fields: [userId], references: [id])

  platform    String
  type        String
  content     String
  imagePath   String?
  url         String?
  title       String?
  description String?

  scheduledAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  schedule       Schedule?
  engagementStat EngagementStat?
}

model Schedule {
  id        String   @id @default(uuid())
  postId    String   @unique
  userId    String
  runAt     DateTime
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
  user User @relation("UserSchedules", fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  refreshToken String
  userAgent    String?
  createdAt    DateTime @default(now())
  expiresAt    DateTime
}

model LLMLog {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  prompt    String
  response  String
  type      String
  createdAt DateTime @default(now())
}

model PlatformAccount {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  platform     String   // e.g., "linkedin", "instagram", etc.
  externalId   String
  username     String?
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([userId, platform]) // ðŸ‘ˆ This is needed
}

model EngagementStat {
  id          String   @id @default(uuid())
  postId      String   @unique
  impressions Int
  likes       Int
  comments    Int
  createdAt   DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
}
